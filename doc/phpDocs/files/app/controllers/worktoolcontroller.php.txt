<?php

/**
 * Kontrolleri, joka hoitaa työkaluihin liittyvät toiminnallisuudet.
 */
class WorkToolController extends BaseController {

    /**
     * Haetaan kaikki työkalut ja luodaan niistä näkymä.
     */
    public static function index() {
        $workTools = WorkTool::allAlphabetical();
        View::make('workTool/workTools.html', array('tools' => $workTools));
    }

    /**
     * Haetaan tietty työkalu ja luodaan siitä näkymä.
     * @param int $id Haetun työkalun id.
     */
    public static function show($id) {
        $workTool = WorkTool::find($id);
        View::make('workTool/workTool.html', array('tool' => $workTool));
    }

    /**
     * Etsitään haluttu työkalu kuvauksen perusteella ja luodaan siitä näkymä.
     * @param String $description Haetun työkalun kuvaus.
     */
    public static function showDescription($description) {
        $workObject = WorkTool::findWithDescription($description);

        if ($workObject == null) {
            Redirect::to('/workTools', array('message' => 'Ei hakutuloksia!'));
        } else {
            $id = $workObject->id;
            Redirect::to('/workTool/' . $id);
        }
    }

    /**
     * Luodaan näkymä uuden työkalun luomiselle.
     */
    public static function create() {
        View::make('workTool/newWorkTool.html');
    }

    /**
     * Luodaan uusi näkymä työkalun luomiselle vanhoilla arvoilla ja virhetiedotteella.
     * @param array $errors Virheilmoitukset listana.
     * @param array $attributes Vanhat arvot listana.
     */
    public static function createErrors($errors, $attributes) {
        View::make('workTool/newWorkTool.html', array('errors' => $errors, 'attributes' => $attributes));
    }

    /**
     * Tarkastetaan käyttäjän antamat tiedot sallituiksi 
     * ja kutsutaan worktool-mallia tallentamaan tiedot tietokantaan.
     */
    public static function store() {
        $params = $_POST;

        $attributes = array(
            'description' => $params['description'],
            'longer_description' => $params['longer_description'],
        );
        $workTool = new WorkTool($attributes);
        $errors = $workTool->errors();

        if (count($errors) == 0) {
            $workTool->save();
            Redirect::to('/workTool/' . $workTool->id, array('message' => 'Työkalu luotu!'));
        } else {
            WorkToolController::createErrors($errors, $attributes);
        }
    }

    /**
     * Tarkastetaan käyttäjän antamat tiedot sallituiksi 
     * ja kutsutaan worktool-mallia päivittämään tiedot tietokantaan.
     * @param int $id Päivitettävän työn id.
     */
    public static function update($id) {
        $params = $_POST;

        $attributes = array(
            'description' => $params['description'],
            'longer_description' => $params['longer_description'],
            'id' => $id
        );

        $workTool = new WorkTool($attributes);
        $errors = $workTool->errors();

        if (count($errors) == 0) {
            $workTool->update();
            Redirect::to('/workTool/' . $id, array('message' => 'Työkalua muokattu!'));
        } else {
            WorkToolController::editErrors($errors, $attributes);
        }
    }

    /**
     * Etsitään haluttu työkalu ja luodaan sille muokkausnäkymä.
     * @param int $id Päivitettävän työn id.
     */
    public static function edit($id) {

        $workTool = WorkTool::find($id);

        $attributes = array(
            'description' => $workTool->description,
            'longer_description' => $workTool->longer_description,
            'id' => $id
        );

        View::make('/workTool/workToolEdit.html', array('attributes' => $attributes));
    }

    /**
     * Luodaan uusi muokkausnäkymä vanhoilla arvoilla ja virhetiedotteella.
     * @param array $errors Virheilmoitukset listana.
     * @param array $attributes Vanhat arvot listana.
     */
    public static function editErrors($errors, $attributes) {
        View::make('workTool/workToolEdit.html', array('attributes' => $attributes, 'errors' => $errors));
    }

    /**
     * Tarkastetaan käyttäjän oikeus työkalujen poistoon. Jos oikeus löytyy,
     * niin etsitään työkalu ja tarkastetaan sen yhteydet olemassaoleviin töihin.
     * Jos yhteyksiä ei ole, kutsutaan worktool-mallia poistamaan tiedot tietokannasta.
     * @param int $id Poistettavan työkalun id.
     */
    public static function destroy($id) {
        $isAdmin = User::find($_SESSION['username']);

        if ($isAdmin->admin) {
            $workTool = WorkTool::find($id);
            $errors = $workTool->validate_connections();

            if (count($errors) == 0) {
                $workTool->destroy();
                Redirect::to('/workTools', array('message' => 'Työkalu poistettu!'));
            } else {
                Redirect::to('/workTool/' . $id, array('errors' => $errors));
            }
        } else {
            $errors[] = 'Sinun täytyy kirjautua admin-tunnuksilla poistaaksesi työkalun!';
            Redirect::to('/workTool/' . $id, array('errors' => $errors));
        }
    }

    /**
     * Etsitään haluttu työkalu annetun kuvauksen perusteella.
     */
    public static function findWithDescription() {
        $params = $_POST;
        $searchedDescription = $params['description'];
        $workTool = WorkTool::findWithDescription($searchedDescription);
        if ($workTool == null) {
            Redirect::to('/workTools', array('message' => 'Ei hakutuloksia!'));
        } else {
            $id = $workTool->id;
            Redirect::to('/workTool/' . $id, array('message' => 'Löytyi!'));
        }
    }

}

