<?php

/**
 * Kontrolleri, joka hoitaa töihin liittyvät toiminnallisuudet.
 */
class WorkController extends BaseController {

    /**
     * Hae kaikki työt tietokannasta ja luo niistä näkymä.
     */
    public static function index() {
        $works = Work::all();
        View::make('work/works.html', array('works' => $works));
    }

    /**
     * Etsi haluttu työ ja siihen liittyvät tekijät tietokannasta ja luo näistä näkymä.
     * @param int $id Haetun työn id.
     */
    public static function show($id) {
        $work = Work::find($id);
        $worksUsers = UsersWorks::getUsersForWork($id);
        View::make('work/work.html', array('work' => $work, 'users' => $worksUsers));
    }

    /**
     * Hae kaikki vaihtoehdot (aakkosjärjestyksessä) työn luomiselle ja tee näistä näkymä.
     */
    public static function create() {
        $objects = WorkObject::allAlphabetical();
        $tools = WorkTool::allAlphabetical();
        $users = User::allAlphabetical();
        View::make('work/newWork.html', array('objects' => $objects, 'tools' => $tools, 'users' => $users));
    }

    /**
     * Metodi, jota kutsutaan kun käyttäjän antamissa tiedoissa on virheitä työn luomisessa.
     * Luodaan uusi työn luomisnäkymä vanhoilla arvoilla ja virhetiedotteella.
     * @param array $errors Virheilmoitukset listana.
     * @param array $attributes Vanhat arvot listana.
     */
    public static function createErrors($errors, $attributes) {
        $objects = WorkObject::allAlphabetical();
        $tools = WorkTool::allAlphabetical();
        $users = User::allAlphabetical();
        View::make('work/newWork.html', array('objects' => $objects, 'tools' => $tools, 'users' => $users, 'errors' => $errors, 'attributes' => $attributes));
    }

    /**
     * Tarkistetaan käyttäjän antamat tiedot uudelle työlle oikeiksi 
     * ja kutsutaan work-mallia tallentamaan tiedot tietokantaan.
     */
    public static function store() {
        $params = $_POST;

        If (isset($params['users'])) {
            $attributes = array(
                'object' => $params['object'],
                'tool' => $params['tool'],
                'description' => $params['description'],
                'longer_description' => $params['longer_description'],
                'users' => $params['users']
            );
        } else {
            $attributes = array(
                'object' => $params['object'],
                'tool' => $params['tool'],
                'description' => $params['description'],
                'longer_description' => $params['longer_description']
            );
        }

        $work = new Work($attributes);
        $errors = $work->errors();

        if (count($errors) == 0) {
            $work->save();
            Redirect::to('/work/' . $work->id, array('message' => 'Työ luotu!'));
        } else {
            WorkController::createErrors($errors, $attributes);
        }
    }

    /**
     * Etsitään työtä annetulla kuvauksella.
     */
    public static function findWithKuvaus() {
        $params = $_POST;
        $description = $params['description'];
        $work = Work::findWithDescription($description);
        if ($work == null) {
            Redirect::to('/works', array('message' => 'Ei hakutuloksia!'));
        } else {
            $id = $work->id;
            Redirect::to('/work/' . $id, array('message' => 'Löytyi!'));
        }
    }

    /**
     * Haetaan haluttu työ ja sen tekijät, jonka jälkeen luodaan lista työn tiedoista.
     * Lopulta haetaan kaikki vaihtoehdot työn muokkaamiseksi ja luodaan työn muokkaus -näkymä.
     * @param int $id Halutun työn id.
     */
    public static function edit($id) {
        $work = Work::find($id);
        $worksUsers = UsersWorks::getUsersForWork($id);
        $worksUsersUsernames = array();

        foreach ($worksUsers as $user) {
            $worksUsersUsernames[] = $user->username;
        }

        $attributes = array(
            'id' => $work->id,
            'object' => $work->object,
            'tool' => $work->tool,
            'description' => $work->description,
            'longer_description' => $work->longer_description,
            'done' => $work->done,
            'completion_time' => $work->completion_time,
            'users' => $worksUsersUsernames
        );

        $objects = WorkObject::allAlphabetical();
        $tools = WorkTool::allAlphabetical();
        $worksUsers = User::allAlphabetical();
        View::make('work/workEdit.html', array('attributes' => $attributes, 'objects' => $objects, 'tools' => $tools, 'users' => $worksUsers));
    }

    /**
     * Haetaan kaikki vaihtoehdot työn muokkaamiselle 
     * ja luodaan uusi näkymä vanhoilla tiedoilla ja virhetiedotteella.
     * @param array $errors Virheilmoitukset listana.
     * @param array $errors Vanhat arvot listana.
     */
    public static function editErrors($errors, $attributes) {
        $objects = WorkObject::allAlphabetical();
        $tools = WorkTool::allAlphabetical();
        $users = User::allAlphabetical();
        View::make('work/workEdit.html', array('attributes' => $attributes, 'objects' => $objects, 'tools' => $tools, 'users' => $users, 'errors' => $errors));
    }

    /**
     * Ensin tarkistetaan onko käyttäjä asettanut työlle tekijöitä, ja sen mukaan luodaan attribuutin tallentava taulkko.
     * Tämä osa on vain virheiden välttämiseksi, sillä jos kutsuu $params['users'] ilman, että tekijöitä on asetettu,
     * niin syntaksi ei toimi. Tässä vaiheessa ei periaatteessa vielä pidetä virheenä, jos tekijöitä ei ole.
     * Tämän jälkeen tarkastetaan "done" kohta parametreista, ja muokataan oliota sen mukaan. Lopuksi ajetaan työn 
     * validointimetodit ja tuloksen perusteella pyydetään work-mallia päivittämään tietokantaa tai antamaan virheilmoituksia.
     * @param int $id Päivitettävän työn id.
     */
    public static function update($id) {
        $params = $_POST;

        If (isset($params['users'])) {
            $attributes = array(
                'id' => $id,
                'object' => $params['object'],
                'tool' => $params['tool'],
                'description' => $params['description'],
                'longer_description' => $params['longer_description'],
                'users' => $params['users']
            );
        } else {
            $attributes = array(
                'id' => $id,
                'object' => $params['object'],
                'tool' => $params['tool'],
                'description' => $params['description'],
                'longer_description' => $params['longer_description']
            );
        }

        $work = new Work($attributes);
        if (isset($params['done'])) {
            $attributes['done'] = 1;
            $work->done = true;
        } else {
            $attributes['done'] = 0;
            $work->done = false;
        }
        $errors = $work->errors();

        $work->id = $id;
        if (count($errors) == 0) {
            $work->update();
            Redirect::to('/work/' . $work->id, array('message' => 'Työ muokattu!'));
        } else {
            WorkController::editErrors($errors, $attributes);
        }
    }

    /**
     * Tarkastetaan onko käyttäjällä oikeutta poistaa työtä ja jos on,
     * niin pyydetään work-mallia poistamaan työ tietokannasta. Muuten annetaan virheilmoitus.
     * Näkymissä on kyllä poistettu nappi työn poistamiselle novice-käyttäjiltä, mutta ilman tarkastamista
     * voisi novice-käyttäjä kirjoittaa tarvittavan osoitteen, joka poistaisi työn.
     * @param int $id Poistettavan työn id.
     */
    public static function destroy($id) {
        $isAdmin = User::find($_SESSION['username']);

        if ($isAdmin->admin) {
            $work = new Work(array('id' => $id));
            $work->destroy();

            Redirect::to('/works', array('message' => 'Työ on poistettu!'));
        } else {
            Redirect::to('/works', array('message' => 'Sinun täytyy kirjautua admin-tunnuksilla poistaaksesi työn!'));
        }
    }

    /**
     * Kutsutaan work-mallia päivittämään annettu työ tehdyksi tietokantaan.
     * @param int $id Tehdyn työn id.
     */
    public static function markAsDone($id) {
        $work = Work::find($id);

        $work->done = true;
        $work->Done();

        Redirect::to('/work/' . $id, array('message' => 'Työ merkattu tehdyksi!'));
    }

}

